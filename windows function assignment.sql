use mavenmovies;

--- 1. rank the customer based on the total amount they've spend on rental 

with customerranking as 
(select customer_id,sum(amount) as total_amount,
rank() over(order by sum(amount) desc) as customer_rank
from payment
group by customer_id)
select customer_id, total_amount ,customer_rank from customerranking;


--- 2. calculate cumulative revenue generated by each film over time

select f.film_id, f.title, p.payment_date, sum(p.amount) 
over (partition by f.film_id  order by p.payment_date ) as cumulative_revenue
from payment p
join rental r on p.rental_id=r.rental_id
join inventory i on r.inventory_id= i.inventory_id
join film f on i.film_id=f.film_id
order by f.film_id ,p.payment_date;

--- 3. determine the average rental duration for each film 

select film_id,rental_duration,avg(rental_duration) over(partition by length) as avg_rental_duration from film where length is not null;

--- 4. identify the top 3 films in each category based on their rental_count

with rankedfilms as 
(select fc.category_id, fc.film_id,f.title,
row_number() over (partition by fc.category_id order by count(r.rental_id) desc) as ranking
from film_category fc
join rental r on fc.film_id=r.rental_id
join film f on fc.film_id =f.film_id
group by fc.category_id, fc.film_id,f.title)
select category_id, film_id, title,ranking 
from rankedfilms 
where ranking <=3;




--- 5. calculated the diffrence in rental counts between each customer's total rentals and average rentals across all customers

with customrrentalldiff as
(select customer_id,count(rental_id)  as total_rentals, avg(count(rental_id)) over () as avg_rentals,
count(rental_id) - avg(count(rental_id)) over() as rental_diffrence
from rental group by customer_id)
select customer_id, total_rentals,avg_rentals,rental_diffrence from customrrentalldiff  ;





--- 6. find the monthly revenue trend for the entire rental store over time

with monthlyrevenue as 
(select date_formate(payment_date , '%y-%m') as month,
sum(amount) as total_amount
from payment
group by date_formate(payment_date , '%y-%m'))
select month,total_amount, sum(total_amount) over(order by month) as month_revenue
from monthlyrevenue
group by month;



--- 7. identifythe customer whose total spending on rental falls within the top 20% of all customers

with wholecustomers as 
( select customer_id,sum(amount) as total_amount,rank() over(order by sum(amount) desc) as customer_rank
from payment
group by customer_id)
select customer_id,total_amount,customer_rank
from wholecustomers
where customer_rank <=(select 0.2 * count(distinct customer_id) from customer spending);






--- 8. calculate the running total of rental per category , ordered by retal count .

 with runningcategory as
 (
 select fc.category_id, count(r.rental_id) as rental_count,
 rank() over (partition by fc.category_id order by count(r.rental_id) desc ) as rank_of_rental
from film_category fc  
join rental r on fc.film_id=r.inventory_id
group by fc.category_id
)
select rc.category_id,
rc.rental_count,
sum(rc.rental_count) over(order by rc.rank_of_rental ) as running_total
from runningcategory rc
order by rc.rank_of_rental;

--- 9. find the films that have been rented less then the average rental count for their respective categories.

with filmrental as 
(
select fc.film_id,fc.category_id,count(r.rental_id)  as rental_count,
 avg(count(r.rental_id)) over(partition by fc.category_id ) as avg_count
from film_category fc
join rental r on fc.film_id=r.inventory_id
group by fc.film_id,fc.category_id)
select fr.film_id,
	fr.category_id,
        fr.rental_count,
        fr.avg_count
        from filmrental fr
        where fr.rental_count < fr.avg_count;

--- 10.identify the top 5 months with the heighest revenue and display the revenue 
--- generated in each month

with monthlyrevenue as (
select date_format(payment_date, '%y-%m') as month,
sum(amount) as total_amount
from payment
group by date_format(payment_date, '%y-%m'))
select month,total_amount from  monthlyrevenue  order by total_amount desc limit 5;